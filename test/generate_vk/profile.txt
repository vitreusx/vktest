version 1.1 vulkan

# To check structextends: no new command is added, only extending existing
# struct VkBufferCreateInfo
extension NV_dedicated_allocation optional

# To check general extension parsing and enum extension with offset and dir
extension KHR_swapchain optional

# To check that enum extension with value are handled correctly
extension KHR_sampler_mirror_clamp_to_edge optional

# To check that enum extensions with bitpos are handled correctly. There are
# two additional tests for EXT_filter_cubic, see VkEnumAliasWithDependency and
# VkEnumAliasWithoutDependency tests for details
extension IMG_filter_cubic optional

# To check type, define and enum aliases and that only aliases for sources that
# are required get pulled in
extension KHR_external_memory optional

# To check command aliases
extension KHR_get_physical_device_properties2 optional

# To check enum aliases (in VkColorSpaceKHR)
extension KHR_surface optional

begin functions
    CmdDraw
    CmdDrawIndexed

    # To check that VkPhysicalDeviceLimits and VkPhysicalDeviceSparseProperties
    # definitions are put before VkPhysicalDeviceProperties
    GetPhysicalDeviceProperties

    # To verify VkFormatFeatureFlagBits extensions are parsed correctly
    GetPhysicalDeviceFormatProperties

    # To check that VkBufferViewCreateInfo has properly generated space before
    # flags
    CreateBufferView

    # To check that VkDedicatedAllocationBufferCreateInfoNV gets pulled in
    CreateBuffer

    # To verify VkSamplerCreateInfo extensions are parsed correctly
    CreateSampler

    # To verify command aliases and that type aliases that are otherwise not
    # referenced are pulled in as well
    GetPhysicalDeviceProperties2KHR

    # To verify enum aliases (KHR_surface)
    GetPhysicalDeviceSurfaceFormatsKHR

    # To verify this function is loaded at a proper place
    EnumerateInstanceVersion
end functions

begin functions blacklist
    # To verify blacklist has a higher priority
    CmdDraw
end functions blacklist
